# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
styles:
    roads:
        base: lines
        animated: true
        texcoords: true
        shaders:
            blocks:
                global: |
                    float getHatch(in vec2 _pos, float _angle, float _brigtness){
                        _pos *= 20.;
                        _pos = _pos.yx;
                        return 1.0-smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                color: |
                    vec2 st = v_texcoord.xy;
                    float dir = -0.1;
                    if ( v_color.r < 0.5) {
                        if (st.x < 0.5) {
                          dir *= -1.;
                        }
                        st.x = fract(st.x*2.0);
                    }
                    float pattern = getHatch( u_time*dir+st.xy*0.5, 3.1415*0.5, 0.5);
                    color.rgb = vec3(1.000,0.865,0.387)* pattern*sin(smoothstep(0.0,1.,st.x)*3.1415);

    grid:
        base: polygons
        shaders:
            blocks:
                global: |
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }
                    float grid (in vec2 _pos, in float _zoom, in float _lineWidth){
                        _pos = fract(_pos*_zoom);
                        vec2 g = smoothstep(vec2(0.5-_lineWidth),vec2(0.5),_pos) -
                                 smoothstep(vec2(0.5),vec2(0.5+_lineWidth),_pos);
                        return clamp(g.x+g.y,0.0,1.0);
                    }
                    vec2 getConstantPos(vec2 fragCoord){
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = fragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                    }
                filter: |
                    //vec2 pos = worldPosition().xy*0.01;
                    vec2 pos = getConstantPos(gl_FragCoord.xy)*4.0;
                    float b = getBrightness(v_color.rgb);
                    color.rgb = v_color.rgb*grid(pos,10.,0.05+b*0.05)*(1.0-b);
    tiledCross:
        base: polygons
        texcoords: true
        shaders:
            blocks:
                global: |
                    float box(in vec2 _st, in vec2 _size){
                        _size = vec2(0.5) - _size*0.5;
                        vec2 uv = smoothstep(_size,
                                            _size+vec2(0.001),
                                            _st);
                        uv *= smoothstep(_size,
                                        _size+vec2(0.001),
                                        vec2(1.0)-_st);
                        return uv.x*uv.y;
                    }
                    float cross(in vec2 _st, float _size){
                        return  box(_st, vec2(_size*0.5,_size*0.125)) +
                                box(_st, vec2(_size*0.125,_size*0.5));
                    }
                    vec2 getConstantPos(vec2 fragCoord){
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = fragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                    }
                filter: |
                    //vec2 pos = worldPosition().xy*0.01;
                    vec2 pos = getConstantPos(gl_FragCoord.xy)*4.0;
                    float pct = clamp(cross(fract(pos),0.2),0.0,1.0);
                    color.rgb = mix(vec3(0.051,0.071,0.278),vec3(0.654,0.897,1.000),pct);

    walls:
        base: polygons
        texcoords: true
        blend: add
        shaders:
            blocks:
                global: |
                    float grid (in vec2 _pos, in float _zoom, in float _lineWidth){
                        _pos = fract(_pos*_zoom);
                        vec2 g = smoothstep(vec2(0.5-_lineWidth),vec2(0.5),_pos) -
                                 smoothstep(vec2(0.5),vec2(0.5+_lineWidth),_pos);
                        return clamp(g.x+g.y,0.0,1.0);
                    }
                filter: |
                    float pct = grid(v_texcoord,10.,0.1)*0.5;
                    color.rgb = mix(vec3(0.051,0.071,0.278)*0.8,vec3(0.239,0.431,0.718)*0.6,pct)*0.5;
sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: mapzen-rtjEFK2
        max_zoom: 16

layers:
    earth:
        data:
            source: mapzen
        draw:
            grid:
                order: function() { return feature.sort_rank; }
                color: '#ddeeee'
    landuse:
        data:
            source: mapzen
        draw:
            grid:
                order: function() { return feature.sort_rank; }
                color: '#ff00ff'
    water:
        data:
            source: mapzen
        draw:
            tiledCross:
                order: function() { return feature.sort_rank; }
                color: [0,0,0]
            outline:
                order: function() { return feature.sort_rank + 1; }
                style: lines
                color: [0.654,0.897,1.000]
                width: 1px
                tile_edges: false
    roads:
        data:
            source: mapzen
        draw:
            roads:
                order: function() { return feature.sort_rank; }
                color: [0, 0, 0]
                width: 8
        oneway:
            filter: { oneway: yes }
            draw: { roads: { color: red } }

        highway:
            filter:
                kind: highway
            draw:
                roads:
                    width: 12
                outline:
                    style: lines
                    order: 352 # magic
                    color: [0.654,0.897,1.000]
                    width: 13
        tunnel:
            filter:
                is_tunnel: yes
            rail:
                filter:
                    kind: rail
                visible: false
        minor_road:
            filter:
                kind: minor_road
            draw:
                roads:
                    width: 5
        path:
            filter:
                kind: path
            draw:
                roads:
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                roads:
                    width: 3
    buildings:
        data:
            source: mapzen
        draw:
            walls:
                order: function() { return feature.sort_rank; }
                color: [0, 0, 0]
            outline:
                order: function() { return feature.sort_rank + 1; }
                style: lines
                color: [0.654,0.897,1.000]
                width: 1px
                tile_edges: true
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                walls:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }
                outline:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }

    road_labels:
        data: { source: mapzen, layer: roads }
        filter: { name: true, $zoom: { min: 14 } }
        draw:
            text:
                font:
                    style: italic
                    size: 12px
                    family: Helvetica
                    fill: [.9,.9,1.]
                    stroke: { color: black , width: 3 }
    places:
        data: { source: mapzen }
        filter: { name: true }
        draw:
            text:
                font:
                    weight: bold
                    size: 18px
                    family: Helvetica
                    fill: black
                    stroke: { color: white , width: 5 }
