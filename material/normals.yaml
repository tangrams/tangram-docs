styles:
    rock:
        base: polygons
        material:
            normal:
                texture: rock.jpg
                mapping: uv
            ambient: 0.8
            diffuse: 1
            specular: 0

    water:
        base: polygons
        animated: true
        material:
            ambient: .7
            diffuse:
                texture: sky.jpg
                mapping: spheremap
        shaders:
            blocks:
                global: |
                        vec3 random3(vec3 c) {
                            float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                            vec3 r;
                            r.z = fract(512.0*j);
                            j *= .125;
                            r.x = fract(512.0*j);
                            j *= .125;
                            r.y = fract(512.0*j);
                            return r-0.5;
                        }

                        const float F3 =  0.3333333;
                        const float G3 =  0.1666667;
                        float snoise(vec3 p) {

                            vec3 s = floor(p + dot(p, vec3(F3)));
                            vec3 x = p - s + dot(s, vec3(G3));

                            vec3 e = step(vec3(0.0), x - x.yzx);
                            vec3 i1 = e*(1.0 - e.zxy);
                            vec3 i2 = 1.0 - e.zxy*(1.0 - e);

                            vec3 x1 = x - i1 + G3;
                            vec3 x2 = x - i2 + 2.0*G3;
                            vec3 x3 = x - 1.0 + 3.0*G3;

                            vec4 w, d;

                            w.x = dot(x, x);
                            w.y = dot(x1, x1);
                            w.z = dot(x2, x2);
                            w.w = dot(x3, x3);

                            w = max(0.6 - w, 0.0);

                            d.x = dot(random3(s), x);
                            d.y = dot(random3(s + i1), x1);
                            d.z = dot(random3(s + i2), x2);
                            d.w = dot(random3(s + 1.0), x3);

                            w *= w;
                            w *= w;
                            d *= w;

                            return dot(d, vec4(52.0));
                        }

                normal: |
                    normal += snoise(vec3(worldPosition().xy*0.08,u_time*.5))*0.02;

sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: mapzen-rtjEFK2
        max_zoom: 16

layers:
    earth:
        data:
            source: mapzen
            layer: earth
        draw:
            polygons:
                order:order: function() { return feature.sort_rank; }
                color: '#ddeeee'
    landuse:
        data:
            source: mapzen
            layer: landuse
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#aaffaa'
    water:
        data:
            source: mapzen
            layer: water
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#88bbee'
    roads:
        data:
            source: mapzen
            layer: roads
        filter: { not: { kind: [rail, ferry, path] } }
        draw:
            lines:
                order: function() { return feature.sort_rank; }
                color: lightgray
                width: 8    
    buildings:
        data:
            source: mapzen
            layer: buildings
        draw:
            polygons:
                style: rock
                order: function() { return feature.sort_rank; }
                color: |
                    function () {
                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 250, .8);
                        h = Math.max(h, .4);
                        return [h, h, h];
                    }
                extrude: true
