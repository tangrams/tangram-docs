cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

styles:
    rock:
        base: polygons
        material:
            normal:
                texture: ./material/rock.jpg
                mapping: uv
            ambient: 0.8
            diffuse: 1
            specular: 0

    grass:
        base: polygons
        material:
            ambient: [.2,.7,0]
            diffuse:
                texture: ./material/grass01.jpg
                mapping: triplanar
                scale: 0.005
                amount: 0.5
    
    roads:
        base: polygons
        material:
            emission:
                texture: ./material/road.jpg
                mapping: uv

    water:
        base: polygons
        animated: true
        material:
            ambient: .7
            diffuse:
                texture: ./material/sky.jpg
                mapping: spheremap
        shaders:
            blocks:
                global: |
                        vec3 random3(vec3 c) {
                            float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                            vec3 r;
                            r.z = fract(512.0*j);
                            j *= .125;
                            r.x = fract(512.0*j);
                            j *= .125;
                            r.y = fract(512.0*j);
                            return r-0.5;
                        }

                        const float F3 =  0.3333333;
                        const float G3 =  0.1666667;
                        float snoise(vec3 p) {

                            vec3 s = floor(p + dot(p, vec3(F3)));
                            vec3 x = p - s + dot(s, vec3(G3));

                            vec3 e = step(vec3(0.0), x - x.yzx);
                            vec3 i1 = e*(1.0 - e.zxy);
                            vec3 i2 = 1.0 - e.zxy*(1.0 - e);

                            vec3 x1 = x - i1 + G3;
                            vec3 x2 = x - i2 + 2.0*G3;
                            vec3 x3 = x - 1.0 + 3.0*G3;

                            vec4 w, d;

                            w.x = dot(x, x);
                            w.y = dot(x1, x1);
                            w.z = dot(x2, x2);
                            w.w = dot(x3, x3);

                            w = max(0.6 - w, 0.0);

                            d.x = dot(random3(s), x);
                            d.y = dot(random3(s + i1), x1);
                            d.z = dot(random3(s + i2), x2);
                            d.w = dot(random3(s + 1.0), x3);

                            w *= w;
                            w *= w;
                            d *= w;

                            return dot(d, vec4(52.0));
                        }

                normal: |
                    normal += snoise(vec3(v_world_position.xy*0.08,u_time*.5))*0.02;

sources:
    osm:
        type: TopoJSONTiles
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw

layers:
    earth:
        data:
            source: osm
            layer: earth
        draw:
            polygons:
                order: 0
                color: '#ddeeee'
    landuse:
        data:
            source: osm
            layer: landuse
        draw:
            polygons:
                style: grass
                order: 1
                color: '#aaffaa'
                interactive: true

    water:
        data:
            source: osm
            layer: water
        draw:
            polygons:
                style: water
                order: 2
                color: '#88bbee'

    roads:
        data:
            source: osm
            layer: roads
        draw:
            lines:
                order: 3
                color: gray    
                width: 8
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    style: roads
                    color: '#cc6666'
                    width: 12
                # outline:
                #     style: lines
                #     color: grey
                #     width: 3
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                lines:
                    color: tan
            rail:
                filter:
                    kind: rail
                draw:
                    lines:
                        width: 0
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    color: lightgrey
                    width: 5
        path:
            filter:
                kind: path
            draw:
                lines:
                    color: [0.8, 0.8, 0.8]
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                lines:
                    color: pink
                    width: 3
    
    buildings:
        data:
            source: osm
            layer: buildings
        draw:
            polygons:
                style: rock
                order: 4
                color: |
                    function () {
                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 250, .8);
                        h = Math.max(h, .4);
                        return [h, h, h];
                    }
                extrude: true
